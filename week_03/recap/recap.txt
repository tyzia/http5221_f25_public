Recap from Week 3
(delivered at Week 4)



Regex - a tool to work with strings.
It can search for a match, replace, extract.

Workflow:
1. Create a regex pattern / /
2. Test string against this pattern.

Examples:
/1/.test('1') -> true
/h/.test('h') -> true
/[1-9]/.test('02') -> true
/[a-z]/.test('A') -> false
/[a-zA-Z]/.test('A') -> true
/[a-z]/i.test('A') -> true

Regex is looking everywhere:
/cat/.test('The cat is nice') -> true

Quantifiers in Regex:

. = matches any character
/c.t/.test('The cot is nice') -> true

+ = one or more match of previous character
/ca+t/.test('The caaat is nice') -> true
/ca+t/.test('The ct is nice') -> false

* = zero or more match of previous character
/ca*t/.test('The ct is nice') -> true
/ca*t/.test('The caaat is nice') -> true

? = preceding character is optional
/ca?t/.test('The ct is nice') -> true
/ca?t/.test('The caaat is nice') -> false

{n} = exactly n matches
/ca{2}t/.test('The caat is nice') -> true
/ca{2}t/.test('The cat is nice') -> false

Searching for special characters: . + ?
Need to escape with \
. -> \.
+ -> \+
? -> \?
/\./.test('example.com') -> true

Special markers in Regex:

\d = any number
\w = any word character (letters, digits, underscores)

/\d/.test('abc123') -> true
/\w+/.test('abc123') -> true

Other special markers:

^ = marks beginning of the string
$ = marks the end of the string

/^cat$/.test('cat') -> true
/^cat$/.test('cat ') -> false

Online tool: https://regex101.com/



Error Handling

Any time JS will encounter an error,
it will crash the app and throw
unhandled error.

To prevent app from crashing use:

try { risky } catch(err) { }

We can throw custom errors from our functions:

function showName(a) {
    if (a === undefined) {
 		throw new Error('You provided undefined value');
 	}
 	if (a === null) {
 		throw new Error('You provided null value');
 	}
  	return a.name;
}

And catch these errors:

try { showName(null); }
catch(err) { console.log(`${err}`); }

Best practice: provide error code + description

function showName(a) {
    if (a === undefined) {
 		const error = new Error('You provided undefined value');
 		error.code = 'ERR_UNDEFINED';
 		throw error;
 	}
    return a.name;
}

try { showName(undefined); }
catch(err) { console.log(`${err.code}`); }



Unit tests

We test unit of code (function) if it:
- is doing what is supposed to.
- is not doing what is not supposed to.

Original
function add(a, b) { return a + b }

Test function
function testAdd(valueA, valueB, result) {
    return add(valueA, valueB) === result;
}

Test cases
console.log(testAdd(1, 1, 2));
console.log(testAdd(2, 2, 4));
console.log(testAdd(-3, 2, -1));

Edge cases - values at the ends of the range.

Testing error handling

Original
function isValidAge(age) {
    if (typeof age !== 'number') {
 		throw new Error('Invalid input');
 	}
 	return age >= 18 && age <= 25;
}

Test function
function testAdd(value, result) {
    return isValidAge(value) === result;
}

Test cases
try {
 	testIsValidAge('18', 'Invalid input');
} catch(err) {
    if (err.message === expected) {
		console.log('Test passed');
 	} else {
		console.error('Test failed');
	}
}


TDD
Test Driven Development

We write tests first.
We run the tests and they fail (good).
We add actual code.
We run the tests again and they pass (good).





